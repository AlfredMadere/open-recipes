
# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2023-10-24T00:41:23+00:00

from __future__ import annotations

from datetime import datetime, timedelta
from typing import Annotated, Optional

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel
from sqlalchemy import text
from sqlalchemy.engine import Engine

from open_recipes.database import get_engine
import dotenv
import os
from open_recipes.models import SignUpRequest, UserInDB

def get_secret():
    dotenv.load_dotenv()
    return os.environ.get("API_SECRET_KEY")
print("seret", get_secret())
SECRET_KEY = get_secret()
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/token")

router = APIRouter(
  prefix="/auth",


)

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

# Dependency to get the current user from the token
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password):
    return pwd_context.hash(password)


def get_user(username: str):
    engine = get_engine()
    with engine.connect() as conn:
        result = conn.execute(text("""SELECT email, phone, name, id, hashed_password FROM "user" WHERE email = :username"""), {"username": username})
        user_record = result.fetchone()
        if user_record:
            # Assuming the record is a RowProxy, which acts like a dict
            email, phone, name, id, hashed_password = user_record
            return UserInDB(email=email, phone=phone, name=name, hashed_password=hashed_password, id=id)
        return None


def authenticate_user(username: str, password: str):
    user = get_user(username)
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user


def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user( username=token_data.username)
    if user is None:
        raise credentials_exception
    return user


async def get_current_active_user(
    current_user: Annotated[UserInDB, Depends(get_current_user)]
):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user


@router.post("/token", response_model=Token)
async def login_for_access_token(
    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]
):
    user: UserInDB = authenticate_user( form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.email}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@router.post("/sign-up", status_code=201)
def create_user(sign_up_data: SignUpRequest, engine : Annotated[Engine, Depends(get_engine)]):
    # Hash the password
    hashed_password = pwd_context.hash(sign_up_data.password)

    # Connect to the database and insert the new user
    with engine.begin() as conn:
        # Adjust the SQL query to match your database schema
        query = text("""
            INSERT INTO "user" (email, name, phone, hashed_password)
            VALUES (:email, :name, :phone, :hashed_password)
            RETURNING id
        """)
        result = conn.execute(query, {
            "email": sign_up_data.email,
            "name": sign_up_data.name,
            "phone": sign_up_data.phone,
            "hashed_password": hashed_password
        })

        return {"message": "User created successfully", "id": result.fetchone()[0]}
